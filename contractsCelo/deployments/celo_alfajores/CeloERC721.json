{
  "address": "0xFfb893D51eaE767527A3ACAA9C0B4AF9B9937c32",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "_setEventURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "EventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokentId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "claimToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        }
      ],
      "name": "createBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "createEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "eventURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd459fcb663df169e5ed3146fdcf0366791fe958bac66aff18aba5ef0579ae69b",
  "receipt": {
    "to": null,
    "from": "0x4190574AC97951da900c47FaF358efCa3AaADd0b",
    "contractAddress": "0xFfb893D51eaE767527A3ACAA9C0B4AF9B9937c32",
    "transactionIndex": 0,
    "gasUsed": "2664132",
    "logsBloom": "0x
    "blockHash": "0x88cd4dd780c0ac19a729ea513b5b10bc1a58930944970153068e2192f6f9e151",
    "transactionHash": "0xd459fcb663df169e5ed3146fdcf0366791fe958bac66aff18aba5ef0579ae69b",
    "logs": [],
    "blockNumber": 10394687,
    "cumulativeGasUsed": "2664132",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "CELO",
    "CELO"
  ],
  "numDeployments": 2,
  "solcInputHash": "ff96af163a0d965bc5d84f962c810793",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"_setEventURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokentId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"createEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"eventURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CeloERC721.sol\":\"CeloERC721\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CeloERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract CeloERC721 is ERC721  {\\n\\n\\tuint256 private _tokenIds;\\n\\tuint256 private _bidIds;\\n\\tuint256 private _eventIds;\\n\\tmapping(uint256 => string) private _tokenURIs;\\n\\tmapping(uint256 => string) private _eventURIs;\\n\\tmapping(uint256 => string[2]) private AllTokensBids;\\n\\tmapping(uint256 => string[2]) private AllEventTokens;\\n\\nconstructor(string memory name, string memory symbol)\\n\\t\\tERC721(name, symbol)\\n\\t{}\\n\\n   \\n\\tfunction claimToken(address _claimer,uint256 eventId,uint256 tokentId,\\n\\t\\tstring memory _tokenURI) public  returns (uint256) {\\n\\t\\t_mint(_claimer, _tokenIds);\\n\\t\\t_setTokenEvent(tokentId,eventId, _tokenURI);\\n\\t\\t_tokenIds++;\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\tfunction _setTokenEvent(\\n\\t\\tuint256 TokenId,\\n\\t\\tuint256 EventId,\\n\\t\\tstring memory _tokenURI\\n\\t) public virtual {\\n\\t\\tAllEventTokens[TokenId] = [\\n\\t\\t\\tStrings.toString(EventId),\\n\\t\\t\\tstring(_tokenURI)\\n\\t\\t];\\n\\t}\\n\\n\\tfunction createEvent( string memory _eventURI) public returns (uint256) {\\n\\t\\t_setEventURI(_eventIds, _eventURI);\\n\\t\\t_eventIds++;\\n\\t\\treturn _eventIds;\\n\\t}\\n\\tfunction _setEventURI(uint256 eventId, string memory _eventURI) public virtual {\\n\\t\\t_eventURIs[eventId] = _eventURI;\\n\\t}\\n\\n\\tfunction eventURI(uint256 eventId) public view returns (string memory) {\\n\\t\\treturn _eventURIs[eventId];\\n\\t}\\n\\n\\tfunction latestTokenID() public view returns ( uint256) {\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\n\\n\\tfunction createBid(uint256 tokenId, string memory _bidURI\\n\\t) public  payable {\\n\\t\\tAllTokensBids[_bidIds] = [\\n\\t\\t\\tStrings.toString(tokenId),\\n\\t\\t\\tstring(_bidURI)\\n\\t\\t];\\n\\t\\t_bidIds++;\\n\\t}\\n\\n}\\n\\n\\n\",\"keccak256\":\"0x9398df82b456397f1ba5b1975fde0f2c75aaba8f53568e25b97ae3d8f1d9097a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003221380380620032218339818101604052810190620000379190620001a3565b818181600090805190602001906200005192919062000075565b5080600190805190602001906200006a92919062000075565b5050505050620003ac565b8280546200008390620002bd565b90600052602060002090601f016020900481019282620000a75760008555620000f3565b82601f10620000c257805160ff1916838001178555620000f3565b82800160010185558215620000f3579182015b82811115620000f2578251825591602001919060010190620000d5565b5b50905062000102919062000106565b5090565b5b808211156200012157600081600090555060010162000107565b5090565b60006200013c620001368462000251565b62000228565b9050828152602081018484840111156200015b576200015a6200038c565b5b6200016884828562000287565b509392505050565b600082601f83011262000188576200018762000387565b5b81516200019a84826020860162000125565b91505092915050565b60008060408385031215620001bd57620001bc62000396565b5b600083015167ffffffffffffffff811115620001de57620001dd62000391565b5b620001ec8582860162000170565b925050602083015167ffffffffffffffff81111562000210576200020f62000391565b5b6200021e8582860162000170565b9150509250929050565b60006200023462000247565b9050620002428282620002f3565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026f576200026e62000358565b5b6200027a826200039b565b9050602081019050919050565b60005b83811015620002a75780820151818401526020810190506200028a565b83811115620002b7576000848401525b50505050565b60006002820490506001821680620002d657607f821691505b60208210811415620002ed57620002ec62000329565b5b50919050565b620002fe826200039b565b810181811067ffffffffffffffff8211171562000320576200031f62000358565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b612e6580620003bc6000396000f3fe60806040526004361061011f5760003560e01c806370137593116100a0578063a22cb46511610064578063a22cb465146103fc578063b88d4fde14610425578063c22aac201461044e578063c87b56dd1461048b578063e985e9c5146104c85761011f565b806370137593146102fe57806370a082311461031a57806395d89b41146103575780639bc2bc7114610382578063a0fd0c6a146103bf5761011f565b806323b872dd116100e757806323b872dd1461021b5780633074cb51146102445780633592dd801461026f57806342842e0e146102985780636352211e146102c15761011f565b806301ffc9a71461012457806306fdde0314610161578063081812fc1461018c578063095ea7b3146101c95780631cd043d6146101f2575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190611ed3565b610505565b60405161015891906123b3565b60405180910390f35b34801561016d57600080fd5b506101766105e7565b60405161018391906123ce565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae9190611f76565b610679565b6040516101c0919061234c565b60405180910390f35b3480156101d557600080fd5b506101f060048036038101906101eb9190611e10565b6106fe565b005b3480156101fe57600080fd5b5061021960048036038101906102149190611fa3565b610816565b005b34801561022757600080fd5b50610242600480360381019061023d9190611cfa565b610842565b005b34801561025057600080fd5b506102596108a2565b60405161026691906125b0565b60405180910390f35b34801561027b57600080fd5b5061029660048036038101906102919190611fff565b6108ac565b005b3480156102a457600080fd5b506102bf60048036038101906102ba9190611cfa565b6108f0565b005b3480156102cd57600080fd5b506102e860048036038101906102e39190611f76565b610910565b6040516102f5919061234c565b60405180910390f35b61031860048036038101906103139190611fa3565b6109c2565b005b34801561032657600080fd5b50610341600480360381019061033c9190611c8d565b610a1f565b60405161034e91906125b0565b60405180910390f35b34801561036357600080fd5b5061036c610ad7565b60405161037991906123ce565b60405180910390f35b34801561038e57600080fd5b506103a960048036038101906103a49190611f2d565b610b69565b6040516103b691906125b0565b60405180910390f35b3480156103cb57600080fd5b506103e660048036038101906103e19190611f76565b610b99565b6040516103f391906123ce565b60405180910390f35b34801561040857600080fd5b50610423600480360381019061041e9190611dd0565b610c3e565b005b34801561043157600080fd5b5061044c60048036038101906104479190611d4d565b610c54565b005b34801561045a57600080fd5b5061047560048036038101906104709190611e50565b610cb6565b60405161048291906125b0565b60405180910390f35b34801561049757600080fd5b506104b260048036038101906104ad9190611f76565b610cf4565b6040516104bf91906123ce565b60405180910390f35b3480156104d457600080fd5b506104ef60048036038101906104ea9190611cba565b610d9b565b6040516104fc91906123b3565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105d057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105e057506105df82610e2f565b5b9050919050565b6060600080546105f690612806565b80601f016020809104026020016040519081016040528092919081815260200182805461062290612806565b801561066f5780601f106106445761010080835404028352916020019161066f565b820191906000526020600020905b81548152906001019060200180831161065257829003601f168201915b5050505050905090565b600061068482610e99565b6106c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ba90612530565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061070982610910565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561077a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077190612570565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610799610f05565b73ffffffffffffffffffffffffffffffffffffffff1614806107c857506107c7816107c2610f05565b610d9b565b5b610807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fe906124b0565b60405180910390fd5b6108118383610f0d565b505050565b80600a6000848152602001908152602001600020908051906020019061083d9291906119ea565b505050565b61085361084d610f05565b82610fc6565b610892576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088990612590565b60405180910390fd5b61089d8383836110a4565b505050565b6000600654905090565b60405180604001604052806108c08461130b565b815260200182815250600c60008581526020019081526020016000209060026108ea929190611a70565b50505050565b61090b83838360405180602001604052806000815250610c54565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156109b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b0906124f0565b60405180910390fd5b80915050919050565b60405180604001604052806109d68461130b565b815260200182815250600b60006007548152602001908152602001600020906002610a02929190611a70565b5060076000815480929190610a1690612869565b91905055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a87906124d0565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610ae690612806565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1290612806565b8015610b5f5780601f10610b3457610100808354040283529160200191610b5f565b820191906000526020600020905b815481529060010190602001808311610b4257829003601f168201915b5050505050905090565b6000610b7760085483610816565b60086000815480929190610b8a90612869565b91905055506008549050919050565b6060600a60008381526020019081526020016000208054610bb990612806565b80601f0160208091040260200160405190810160405280929190818152602001828054610be590612806565b8015610c325780601f10610c0757610100808354040283529160200191610c32565b820191906000526020600020905b815481529060010190602001808311610c1557829003601f168201915b50505050509050919050565b610c50610c49610f05565b838361146c565b5050565b610c65610c5f610f05565b83610fc6565b610ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9b90612590565b60405180910390fd5b610cb0848484846115d9565b50505050565b6000610cc485600654611635565b610ccf8385846108ac565b60066000815480929190610ce290612869565b91905055506006549050949350505050565b6060610cff82610e99565b610d3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3590612550565b60405180910390fd5b6000610d4861180f565b90506000815111610d685760405180602001604052806000815250610d93565b80610d728461130b565b604051602001610d83929190612328565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610f8083610910565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610fd182610e99565b611010576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100790612490565b60405180910390fd5b600061101b83610910565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061108a57508373ffffffffffffffffffffffffffffffffffffffff1661107284610679565b73ffffffffffffffffffffffffffffffffffffffff16145b8061109b575061109a8185610d9b565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166110c482610910565b73ffffffffffffffffffffffffffffffffffffffff161461111a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111190612410565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561118a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118190612450565b60405180910390fd5b611195838383611826565b6111a0600082610f0d565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111f0919061271c565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112479190612695565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461130683838361182b565b505050565b60606000821415611353576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611467565b600082905060005b6000821461138557808061136e90612869565b915050600a8261137e91906126eb565b915061135b565b60008167ffffffffffffffff8111156113a1576113a061299f565b5b6040519080825280601f01601f1916602001820160405280156113d35781602001600182028036833780820191505090505b5090505b60008514611460576001826113ec919061271c565b9150600a856113fb91906128b2565b60306114079190612695565b60f81b81838151811061141d5761141c612970565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561145991906126eb565b94506113d7565b8093505050505b919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156114db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d290612470565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115cc91906123b3565b60405180910390a3505050565b6115e48484846110a4565b6115f084848484611830565b61162f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611626906123f0565b60405180910390fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169c90612510565b60405180910390fd5b6116ae81610e99565b156116ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e590612430565b60405180910390fd5b6116fa60008383611826565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461174a9190612695565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461180b6000838361182b565b5050565b606060405180602001604052806000815250905090565b505050565b505050565b60006118518473ffffffffffffffffffffffffffffffffffffffff166119c7565b156119ba578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261187a610f05565b8786866040518563ffffffff1660e01b815260040161189c9493929190612367565b602060405180830381600087803b1580156118b657600080fd5b505af19250505080156118e757506040513d601f19601f820116820180604052508101906118e49190611f00565b60015b61196a573d8060008114611917576040519150601f19603f3d011682016040523d82523d6000602084013e61191c565b606091505b50600081511415611962576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611959906123f0565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506119bf565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546119f690612806565b90600052602060002090601f016020900481019282611a185760008555611a5f565b82601f10611a3157805160ff1916838001178555611a5f565b82800160010185558215611a5f579182015b82811115611a5e578251825591602001919060010190611a43565b5b509050611a6c9190611ac3565b5090565b8260028101928215611ab2579160200282015b82811115611ab1578251829080519060200190611aa19291906119ea565b5091602001919060010190611a83565b5b509050611abf9190611ae0565b5090565b5b80821115611adc576000816000905550600101611ac4565b5090565b5b80821115611b005760008181611af79190611b04565b50600101611ae1565b5090565b508054611b1090612806565b6000825580601f10611b225750611b41565b601f016020900490600052602060002090810190611b409190611ac3565b5b50565b6000611b57611b52846125f0565b6125cb565b905082815260208101848484011115611b7357611b726129d3565b5b611b7e8482856127c4565b509392505050565b6000611b99611b9484612621565b6125cb565b905082815260208101848484011115611bb557611bb46129d3565b5b611bc08482856127c4565b509392505050565b600081359050611bd781612dd3565b92915050565b600081359050611bec81612dea565b92915050565b600081359050611c0181612e01565b92915050565b600081519050611c1681612e01565b92915050565b600082601f830112611c3157611c306129ce565b5b8135611c41848260208601611b44565b91505092915050565b600082601f830112611c5f57611c5e6129ce565b5b8135611c6f848260208601611b86565b91505092915050565b600081359050611c8781612e18565b92915050565b600060208284031215611ca357611ca26129dd565b5b6000611cb184828501611bc8565b91505092915050565b60008060408385031215611cd157611cd06129dd565b5b6000611cdf85828601611bc8565b9250506020611cf085828601611bc8565b9150509250929050565b600080600060608486031215611d1357611d126129dd565b5b6000611d2186828701611bc8565b9350506020611d3286828701611bc8565b9250506040611d4386828701611c78565b9150509250925092565b60008060008060808587031215611d6757611d666129dd565b5b6000611d7587828801611bc8565b9450506020611d8687828801611bc8565b9350506040611d9787828801611c78565b925050606085013567ffffffffffffffff811115611db857611db76129d8565b5b611dc487828801611c1c565b91505092959194509250565b60008060408385031215611de757611de66129dd565b5b6000611df585828601611bc8565b9250506020611e0685828601611bdd565b9150509250929050565b60008060408385031215611e2757611e266129dd565b5b6000611e3585828601611bc8565b9250506020611e4685828601611c78565b9150509250929050565b60008060008060808587031215611e6a57611e696129dd565b5b6000611e7887828801611bc8565b9450506020611e8987828801611c78565b9350506040611e9a87828801611c78565b925050606085013567ffffffffffffffff811115611ebb57611eba6129d8565b5b611ec787828801611c4a565b91505092959194509250565b600060208284031215611ee957611ee86129dd565b5b6000611ef784828501611bf2565b91505092915050565b600060208284031215611f1657611f156129dd565b5b6000611f2484828501611c07565b91505092915050565b600060208284031215611f4357611f426129dd565b5b600082013567ffffffffffffffff811115611f6157611f606129d8565b5b611f6d84828501611c4a565b91505092915050565b600060208284031215611f8c57611f8b6129dd565b5b6000611f9a84828501611c78565b91505092915050565b60008060408385031215611fba57611fb96129dd565b5b6000611fc885828601611c78565b925050602083013567ffffffffffffffff811115611fe957611fe86129d8565b5b611ff585828601611c4a565b9150509250929050565b600080600060608486031215612018576120176129dd565b5b600061202686828701611c78565b935050602061203786828701611c78565b925050604084013567ffffffffffffffff811115612058576120576129d8565b5b61206486828701611c4a565b9150509250925092565b61207781612750565b82525050565b61208681612762565b82525050565b600061209782612652565b6120a18185612668565b93506120b18185602086016127d3565b6120ba816129e2565b840191505092915050565b60006120d08261265d565b6120da8185612679565b93506120ea8185602086016127d3565b6120f3816129e2565b840191505092915050565b60006121098261265d565b612113818561268a565b93506121238185602086016127d3565b80840191505092915050565b600061213c603283612679565b9150612147826129f3565b604082019050919050565b600061215f602583612679565b915061216a82612a42565b604082019050919050565b6000612182601c83612679565b915061218d82612a91565b602082019050919050565b60006121a5602483612679565b91506121b082612aba565b604082019050919050565b60006121c8601983612679565b91506121d382612b09565b602082019050919050565b60006121eb602c83612679565b91506121f682612b32565b604082019050919050565b600061220e603883612679565b915061221982612b81565b604082019050919050565b6000612231602a83612679565b915061223c82612bd0565b604082019050919050565b6000612254602983612679565b915061225f82612c1f565b604082019050919050565b6000612277602083612679565b915061228282612c6e565b602082019050919050565b600061229a602c83612679565b91506122a582612c97565b604082019050919050565b60006122bd602f83612679565b91506122c882612ce6565b604082019050919050565b60006122e0602183612679565b91506122eb82612d35565b604082019050919050565b6000612303603183612679565b915061230e82612d84565b604082019050919050565b612322816127ba565b82525050565b600061233482856120fe565b915061234082846120fe565b91508190509392505050565b6000602082019050612361600083018461206e565b92915050565b600060808201905061237c600083018761206e565b612389602083018661206e565b6123966040830185612319565b81810360608301526123a8818461208c565b905095945050505050565b60006020820190506123c8600083018461207d565b92915050565b600060208201905081810360008301526123e881846120c5565b905092915050565b600060208201905081810360008301526124098161212f565b9050919050565b6000602082019050818103600083015261242981612152565b9050919050565b6000602082019050818103600083015261244981612175565b9050919050565b6000602082019050818103600083015261246981612198565b9050919050565b60006020820190508181036000830152612489816121bb565b9050919050565b600060208201905081810360008301526124a9816121de565b9050919050565b600060208201905081810360008301526124c981612201565b9050919050565b600060208201905081810360008301526124e981612224565b9050919050565b6000602082019050818103600083015261250981612247565b9050919050565b600060208201905081810360008301526125298161226a565b9050919050565b600060208201905081810360008301526125498161228d565b9050919050565b60006020820190508181036000830152612569816122b0565b9050919050565b60006020820190508181036000830152612589816122d3565b9050919050565b600060208201905081810360008301526125a9816122f6565b9050919050565b60006020820190506125c56000830184612319565b92915050565b60006125d56125e6565b90506125e18282612838565b919050565b6000604051905090565b600067ffffffffffffffff82111561260b5761260a61299f565b5b612614826129e2565b9050602081019050919050565b600067ffffffffffffffff82111561263c5761263b61299f565b5b612645826129e2565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006126a0826127ba565b91506126ab836127ba565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156126e0576126df6128e3565b5b828201905092915050565b60006126f6826127ba565b9150612701836127ba565b92508261271157612710612912565b5b828204905092915050565b6000612727826127ba565b9150612732836127ba565b925082821015612745576127446128e3565b5b828203905092915050565b600061275b8261279a565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156127f15780820151818401526020810190506127d6565b83811115612800576000848401525b50505050565b6000600282049050600182168061281e57607f821691505b6020821081141561283257612831612941565b5b50919050565b612841826129e2565b810181811067ffffffffffffffff821117156128605761285f61299f565b5b80604052505050565b6000612874826127ba565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156128a7576128a66128e3565b5b600182019050919050565b60006128bd826127ba565b91506128c8836127ba565b9250826128d8576128d7612912565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b612ddc81612750565b8114612de757600080fd5b50565b612df381612762565b8114612dfe57600080fd5b50565b612e0a8161276e565b8114612e1557600080fd5b50565b612e21816127ba565b8114612e2c57600080fd5b5056fea26469706673582212202f835f35b44550d26084d655f649502f471419e2a1766abad10f3894a803033064736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c806370137593116100a0578063a22cb46511610064578063a22cb465146103fc578063b88d4fde14610425578063c22aac201461044e578063c87b56dd1461048b578063e985e9c5146104c85761011f565b806370137593146102fe57806370a082311461031a57806395d89b41146103575780639bc2bc7114610382578063a0fd0c6a146103bf5761011f565b806323b872dd116100e757806323b872dd1461021b5780633074cb51146102445780633592dd801461026f57806342842e0e146102985780636352211e146102c15761011f565b806301ffc9a71461012457806306fdde0314610161578063081812fc1461018c578063095ea7b3146101c95780631cd043d6146101f2575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190611ed3565b610505565b60405161015891906123b3565b60405180910390f35b34801561016d57600080fd5b506101766105e7565b60405161018391906123ce565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae9190611f76565b610679565b6040516101c0919061234c565b60405180910390f35b3480156101d557600080fd5b506101f060048036038101906101eb9190611e10565b6106fe565b005b3480156101fe57600080fd5b5061021960048036038101906102149190611fa3565b610816565b005b34801561022757600080fd5b50610242600480360381019061023d9190611cfa565b610842565b005b34801561025057600080fd5b506102596108a2565b60405161026691906125b0565b60405180910390f35b34801561027b57600080fd5b5061029660048036038101906102919190611fff565b6108ac565b005b3480156102a457600080fd5b506102bf60048036038101906102ba9190611cfa565b6108f0565b005b3480156102cd57600080fd5b506102e860048036038101906102e39190611f76565b610910565b6040516102f5919061234c565b60405180910390f35b61031860048036038101906103139190611fa3565b6109c2565b005b34801561032657600080fd5b50610341600480360381019061033c9190611c8d565b610a1f565b60405161034e91906125b0565b60405180910390f35b34801561036357600080fd5b5061036c610ad7565b60405161037991906123ce565b60405180910390f35b34801561038e57600080fd5b506103a960048036038101906103a49190611f2d565b610b69565b6040516103b691906125b0565b60405180910390f35b3480156103cb57600080fd5b506103e660048036038101906103e19190611f76565b610b99565b6040516103f391906123ce565b60405180910390f35b34801561040857600080fd5b50610423600480360381019061041e9190611dd0565b610c3e565b005b34801561043157600080fd5b5061044c60048036038101906104479190611d4d565b610c54565b005b34801561045a57600080fd5b5061047560048036038101906104709190611e50565b610cb6565b60405161048291906125b0565b60405180910390f35b34801561049757600080fd5b506104b260048036038101906104ad9190611f76565b610cf4565b6040516104bf91906123ce565b60405180910390f35b3480156104d457600080fd5b506104ef60048036038101906104ea9190611cba565b610d9b565b6040516104fc91906123b3565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105d057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105e057506105df82610e2f565b5b9050919050565b6060600080546105f690612806565b80601f016020809104026020016040519081016040528092919081815260200182805461062290612806565b801561066f5780601f106106445761010080835404028352916020019161066f565b820191906000526020600020905b81548152906001019060200180831161065257829003601f168201915b5050505050905090565b600061068482610e99565b6106c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ba90612530565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061070982610910565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561077a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077190612570565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610799610f05565b73ffffffffffffffffffffffffffffffffffffffff1614806107c857506107c7816107c2610f05565b610d9b565b5b610807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fe906124b0565b60405180910390fd5b6108118383610f0d565b505050565b80600a6000848152602001908152602001600020908051906020019061083d9291906119ea565b505050565b61085361084d610f05565b82610fc6565b610892576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088990612590565b60405180910390fd5b61089d8383836110a4565b505050565b6000600654905090565b60405180604001604052806108c08461130b565b815260200182815250600c60008581526020019081526020016000209060026108ea929190611a70565b50505050565b61090b83838360405180602001604052806000815250610c54565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156109b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b0906124f0565b60405180910390fd5b80915050919050565b60405180604001604052806109d68461130b565b815260200182815250600b60006007548152602001908152602001600020906002610a02929190611a70565b5060076000815480929190610a1690612869565b91905055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a87906124d0565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610ae690612806565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1290612806565b8015610b5f5780601f10610b3457610100808354040283529160200191610b5f565b820191906000526020600020905b815481529060010190602001808311610b4257829003601f168201915b5050505050905090565b6000610b7760085483610816565b60086000815480929190610b8a90612869565b91905055506008549050919050565b6060600a60008381526020019081526020016000208054610bb990612806565b80601f0160208091040260200160405190810160405280929190818152602001828054610be590612806565b8015610c325780601f10610c0757610100808354040283529160200191610c32565b820191906000526020600020905b815481529060010190602001808311610c1557829003601f168201915b50505050509050919050565b610c50610c49610f05565b838361146c565b5050565b610c65610c5f610f05565b83610fc6565b610ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9b90612590565b60405180910390fd5b610cb0848484846115d9565b50505050565b6000610cc485600654611635565b610ccf8385846108ac565b60066000815480929190610ce290612869565b91905055506006549050949350505050565b6060610cff82610e99565b610d3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3590612550565b60405180910390fd5b6000610d4861180f565b90506000815111610d685760405180602001604052806000815250610d93565b80610d728461130b565b604051602001610d83929190612328565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610f8083610910565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610fd182610e99565b611010576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100790612490565b60405180910390fd5b600061101b83610910565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061108a57508373ffffffffffffffffffffffffffffffffffffffff1661107284610679565b73ffffffffffffffffffffffffffffffffffffffff16145b8061109b575061109a8185610d9b565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166110c482610910565b73ffffffffffffffffffffffffffffffffffffffff161461111a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111190612410565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561118a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118190612450565b60405180910390fd5b611195838383611826565b6111a0600082610f0d565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111f0919061271c565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112479190612695565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461130683838361182b565b505050565b60606000821415611353576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611467565b600082905060005b6000821461138557808061136e90612869565b915050600a8261137e91906126eb565b915061135b565b60008167ffffffffffffffff8111156113a1576113a061299f565b5b6040519080825280601f01601f1916602001820160405280156113d35781602001600182028036833780820191505090505b5090505b60008514611460576001826113ec919061271c565b9150600a856113fb91906128b2565b60306114079190612695565b60f81b81838151811061141d5761141c612970565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561145991906126eb565b94506113d7565b8093505050505b919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156114db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d290612470565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115cc91906123b3565b60405180910390a3505050565b6115e48484846110a4565b6115f084848484611830565b61162f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611626906123f0565b60405180910390fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169c90612510565b60405180910390fd5b6116ae81610e99565b156116ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e590612430565b60405180910390fd5b6116fa60008383611826565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461174a9190612695565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461180b6000838361182b565b5050565b606060405180602001604052806000815250905090565b505050565b505050565b60006118518473ffffffffffffffffffffffffffffffffffffffff166119c7565b156119ba578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261187a610f05565b8786866040518563ffffffff1660e01b815260040161189c9493929190612367565b602060405180830381600087803b1580156118b657600080fd5b505af19250505080156118e757506040513d601f19601f820116820180604052508101906118e49190611f00565b60015b61196a573d8060008114611917576040519150601f19603f3d011682016040523d82523d6000602084013e61191c565b606091505b50600081511415611962576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611959906123f0565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506119bf565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546119f690612806565b90600052602060002090601f016020900481019282611a185760008555611a5f565b82601f10611a3157805160ff1916838001178555611a5f565b82800160010185558215611a5f579182015b82811115611a5e578251825591602001919060010190611a43565b5b509050611a6c9190611ac3565b5090565b8260028101928215611ab2579160200282015b82811115611ab1578251829080519060200190611aa19291906119ea565b5091602001919060010190611a83565b5b509050611abf9190611ae0565b5090565b5b80821115611adc576000816000905550600101611ac4565b5090565b5b80821115611b005760008181611af79190611b04565b50600101611ae1565b5090565b508054611b1090612806565b6000825580601f10611b225750611b41565b601f016020900490600052602060002090810190611b409190611ac3565b5b50565b6000611b57611b52846125f0565b6125cb565b905082815260208101848484011115611b7357611b726129d3565b5b611b7e8482856127c4565b509392505050565b6000611b99611b9484612621565b6125cb565b905082815260208101848484011115611bb557611bb46129d3565b5b611bc08482856127c4565b509392505050565b600081359050611bd781612dd3565b92915050565b600081359050611bec81612dea565b92915050565b600081359050611c0181612e01565b92915050565b600081519050611c1681612e01565b92915050565b600082601f830112611c3157611c306129ce565b5b8135611c41848260208601611b44565b91505092915050565b600082601f830112611c5f57611c5e6129ce565b5b8135611c6f848260208601611b86565b91505092915050565b600081359050611c8781612e18565b92915050565b600060208284031215611ca357611ca26129dd565b5b6000611cb184828501611bc8565b91505092915050565b60008060408385031215611cd157611cd06129dd565b5b6000611cdf85828601611bc8565b9250506020611cf085828601611bc8565b9150509250929050565b600080600060608486031215611d1357611d126129dd565b5b6000611d2186828701611bc8565b9350506020611d3286828701611bc8565b9250506040611d4386828701611c78565b9150509250925092565b60008060008060808587031215611d6757611d666129dd565b5b6000611d7587828801611bc8565b9450506020611d8687828801611bc8565b9350506040611d9787828801611c78565b925050606085013567ffffffffffffffff811115611db857611db76129d8565b5b611dc487828801611c1c565b91505092959194509250565b60008060408385031215611de757611de66129dd565b5b6000611df585828601611bc8565b9250506020611e0685828601611bdd565b9150509250929050565b60008060408385031215611e2757611e266129dd565b5b6000611e3585828601611bc8565b9250506020611e4685828601611c78565b9150509250929050565b60008060008060808587031215611e6a57611e696129dd565b5b6000611e7887828801611bc8565b9450506020611e8987828801611c78565b9350506040611e9a87828801611c78565b925050606085013567ffffffffffffffff811115611ebb57611eba6129d8565b5b611ec787828801611c4a565b91505092959194509250565b600060208284031215611ee957611ee86129dd565b5b6000611ef784828501611bf2565b91505092915050565b600060208284031215611f1657611f156129dd565b5b6000611f2484828501611c07565b91505092915050565b600060208284031215611f4357611f426129dd565b5b600082013567ffffffffffffffff811115611f6157611f606129d8565b5b611f6d84828501611c4a565b91505092915050565b600060208284031215611f8c57611f8b6129dd565b5b6000611f9a84828501611c78565b91505092915050565b60008060408385031215611fba57611fb96129dd565b5b6000611fc885828601611c78565b925050602083013567ffffffffffffffff811115611fe957611fe86129d8565b5b611ff585828601611c4a565b9150509250929050565b600080600060608486031215612018576120176129dd565b5b600061202686828701611c78565b935050602061203786828701611c78565b925050604084013567ffffffffffffffff811115612058576120576129d8565b5b61206486828701611c4a565b9150509250925092565b61207781612750565b82525050565b61208681612762565b82525050565b600061209782612652565b6120a18185612668565b93506120b18185602086016127d3565b6120ba816129e2565b840191505092915050565b60006120d08261265d565b6120da8185612679565b93506120ea8185602086016127d3565b6120f3816129e2565b840191505092915050565b60006121098261265d565b612113818561268a565b93506121238185602086016127d3565b80840191505092915050565b600061213c603283612679565b9150612147826129f3565b604082019050919050565b600061215f602583612679565b915061216a82612a42565b604082019050919050565b6000612182601c83612679565b915061218d82612a91565b602082019050919050565b60006121a5602483612679565b91506121b082612aba565b604082019050919050565b60006121c8601983612679565b91506121d382612b09565b602082019050919050565b60006121eb602c83612679565b91506121f682612b32565b604082019050919050565b600061220e603883612679565b915061221982612b81565b604082019050919050565b6000612231602a83612679565b915061223c82612bd0565b604082019050919050565b6000612254602983612679565b915061225f82612c1f565b604082019050919050565b6000612277602083612679565b915061228282612c6e565b602082019050919050565b600061229a602c83612679565b91506122a582612c97565b604082019050919050565b60006122bd602f83612679565b91506122c882612ce6565b604082019050919050565b60006122e0602183612679565b91506122eb82612d35565b604082019050919050565b6000612303603183612679565b915061230e82612d84565b604082019050919050565b612322816127ba565b82525050565b600061233482856120fe565b915061234082846120fe565b91508190509392505050565b6000602082019050612361600083018461206e565b92915050565b600060808201905061237c600083018761206e565b612389602083018661206e565b6123966040830185612319565b81810360608301526123a8818461208c565b905095945050505050565b60006020820190506123c8600083018461207d565b92915050565b600060208201905081810360008301526123e881846120c5565b905092915050565b600060208201905081810360008301526124098161212f565b9050919050565b6000602082019050818103600083015261242981612152565b9050919050565b6000602082019050818103600083015261244981612175565b9050919050565b6000602082019050818103600083015261246981612198565b9050919050565b60006020820190508181036000830152612489816121bb565b9050919050565b600060208201905081810360008301526124a9816121de565b9050919050565b600060208201905081810360008301526124c981612201565b9050919050565b600060208201905081810360008301526124e981612224565b9050919050565b6000602082019050818103600083015261250981612247565b9050919050565b600060208201905081810360008301526125298161226a565b9050919050565b600060208201905081810360008301526125498161228d565b9050919050565b60006020820190508181036000830152612569816122b0565b9050919050565b60006020820190508181036000830152612589816122d3565b9050919050565b600060208201905081810360008301526125a9816122f6565b9050919050565b60006020820190506125c56000830184612319565b92915050565b60006125d56125e6565b90506125e18282612838565b919050565b6000604051905090565b600067ffffffffffffffff82111561260b5761260a61299f565b5b612614826129e2565b9050602081019050919050565b600067ffffffffffffffff82111561263c5761263b61299f565b5b612645826129e2565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006126a0826127ba565b91506126ab836127ba565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156126e0576126df6128e3565b5b828201905092915050565b60006126f6826127ba565b9150612701836127ba565b92508261271157612710612912565b5b828204905092915050565b6000612727826127ba565b9150612732836127ba565b925082821015612745576127446128e3565b5b828203905092915050565b600061275b8261279a565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156127f15780820151818401526020810190506127d6565b83811115612800576000848401525b50505050565b6000600282049050600182168061281e57607f821691505b6020821081141561283257612831612941565b5b50919050565b612841826129e2565b810181811067ffffffffffffffff821117156128605761285f61299f565b5b80604052505050565b6000612874826127ba565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156128a7576128a66128e3565b5b600182019050919050565b60006128bd826127ba565b91506128c8836127ba565b9250826128d8576128d7612912565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b612ddc81612750565b8114612de757600080fd5b50565b612df381612762565b8114612dfe57600080fd5b50565b612e0a8161276e565b8114612e1557600080fd5b50565b612e21816127ba565b8114612e2c57600080fd5b5056fea26469706673582212202f835f35b44550d26084d655f649502f471419e2a1766abad10f3894a803033064736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1590,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1592,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_bidIds",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1594,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_eventIds",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1598,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1602,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_eventURIs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1608,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "AllTokensBids",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1614,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "AllEventTokens",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)2_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)2_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}